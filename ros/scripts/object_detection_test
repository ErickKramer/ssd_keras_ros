#!/usr/bin/env python2
import argparse


def main(image_path, class_annotation_file, kwargs_file):
    import cv2
    from matplotlib import pyplot as plt
    from mas_perception_libs import ImageDetectionKey
    from mas_perception_libs.visualization import BoundingBoxKey, visualize_boxes, bgr_dict_from_classes
    from ssd_keras_ros import SSDKerasObjectDetector

    detector = SSDKerasObjectDetector(class_file=class_annotation_file, model_kwargs_file=kwargs_file)

    img = cv2.imread(image_path)
    img_msg = detector._cv_bridge.cv2_to_imgmsg(img, 'bgr8')
    result = detector.detect([img_msg])

    color_dict = bgr_dict_from_classes(detector.classes.values())

    plt.figure(figsize=(20, 12))

    boxes = []
    for box in result[0]:
        bounding_box = {BoundingBoxKey.X_MIN: box[ImageDetectionKey.X_MIN],
                        BoundingBoxKey.Y_MIN: box[ImageDetectionKey.Y_MIN],
                        BoundingBoxKey.X_MAX: box[ImageDetectionKey.X_MAX],
                        BoundingBoxKey.Y_MAX: box[ImageDetectionKey.Y_MAX]}
        label = '{}: {:.2f}'.format(box[ImageDetectionKey.CLASS], box[ImageDetectionKey.CONF])
        bounding_box[BoundingBoxKey.LABEL] = label
        bounding_box[BoundingBoxKey.COLOR] = color_dict[box[ImageDetectionKey.CLASS]]
        boxes.append(bounding_box)

    box_image = visualize_boxes(img, boxes)
    plt.imshow(cv2.cvtColor(box_image, cv2.COLOR_BGR2RGB))
    plt.show()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Tool to test ssd_keras object detection')
    parser.add_argument('--image', '-i', required=True, help='image to be tested.')
    parser.add_argument('--class-file', '-c', required=True, help='YAML file containing class annotations.')
    parser.add_argument('--kwargs-file', '-k', required=True,
                        help='file contain keyword arguments for the detection class.')
    args = parser.parse_args()

    # load kwargs file
    main(args.image, args.class_file, args.kwargs_file)
